== Bugs ==

TODO: If you name something a document with a period, and then give it
subdocuments, its shows up in two entries in a list. For example: 
1. create("I. The Call")
2. create("I. The Call/Home")
3. list()
The result is:
I
I. The Call

Also, does weird things when you call edit, and rename. Just try:
edit("I. The Call") 
rename("I. The Call","I The Call") 
and see what happens.

Basically, the whole file extension thing isn't working with all things.
This could also mean problems with underscores. The answer might be to
make '.' and '_' into bad name characters, but that might also be overkill.

TODO: Doing a call to core/docs.matchDocs with a GLOBSTAR will come up
with an error "'q' is not defined". This has been fixed, just not published
to the server yet.

TODO: When calling order after/before with a relativeTo that isn't ordered,
the index doesn't actually change relative to the other doc, i think it
just moved the doc to the end. Instead, it should really report an error
indicating that the relative document does not exist.

TODO: When calling list on the root directory of a project, docs are
not listed in the order of their index. I suspect it's looking in the wrong
place to get the data.

TODO: When calling order after/before with a relativeTo doc, the relativeTo
value is resolved against the current directory, even if we're moving a
doc outside of that directory. I think it should probably resolve against
the parent directory of the file whose order is being changed.

TODO: When calling a command that returns an empty standard object (such
as "get" on a doc that has no value for the properties), "[Object]" is 
returned instead of something else that indicates an empty "<object>".

TODO: I had a doc named something like "A scene...", including the dots at
the end. I attempted to set it's "category" to "Task". The new value shows up
in the properties.json file, but it did not change the color with the list
command, and when listing the category as well, the category was the default
category. Renaming the files so that the ending dots weren't there fixed this.

TODO: When formatting the content of an empty object or array for output,
it comes out as [object Object], or something like that. It should come out
with "<none>" or something like that.

TODO: When formatting an object in a table, and the object is in the second column,
the column does not seem to be indented appropriately.

TODO: When you rename the current document itself, the current working document
does not change, and you get into a situation where you can't do anything because
it keeps saying "Attempted to get a document that doesn't exist"

== Features ==
 
TODO: Convert SFMS to work with Promises instead of callbacks.

TODO: 'order' should be able to "pack" the index if no parameters are passed.
Meaning, it will look at the current index and compare it to the list of
docs that are currently inside, and if any aren't actually there, the
missing documents will be removed from the index. Right now, numeric
order doesn't work when there's huge gaps in the index caused by renaming
lots of files.
    
TODO: The properties in the core should have a way of listing all user property names. 
This will allow more flexible tools, and less changes when a new property
is added. Although, this will require some sort of "type" reflection, 
so the tools also know what to do with it. This isn't *too* difficult, but 
it's getting a little more complicated than it should be.

TODO: The properties in the core should als have a way of listing all property functions 
(since the functions are placed on a prototype). This will make a 'config' command
easier, since I don't have to create a separate command for each property.
 
TODO: It would be nice if the command line would retain it's history between
sessions, perhaps with a max limit, of course.
 
TODO: "Set" should allow a null value or undefined to delete a property value. I
think it's doing this, but I'm not entirely sure and it needs to be tested.
 
TODO: Now that I've got selectors, updators are useful too, for mass
 update of fields using list (or perhaps a separate, similar command, like `update`)

TODO: List should at least have an option for indicating files that are directories. For
example, a '+' sign next to it, or something. Or a Wingding folder symbol, if there is one.
I've got the "glyph" style added to the formatters, it shouldn't be too difficult to add
this to the list command.

TODO: When printing out the synopsis in a list, it extends over the edge of the screen, instead of being
wrapped around. I wonder if I should be putting some sort of "wrap style" on the synopsis when it's retrieved.

TODO: When creating documents, it would be nice to be able to set some properties at the same time.
With the creation of 'setters', mentioned elsewhere, this could be done easily.

TODO: I really want to be able to color things according to either status, or some tag, instead of
 category. Or, give the user the ability to do this. I mean, coloring by category is nice, but I'd rather
 make it easier to find the items that haven't been done yet: My use of Task as a category to make things
 red is a kludge. Yes, Tasks should be red, but the category of these docs should be Scene, not Task.
 Therefore, I would rather be able to see scenes with a status of "To Do" be red instead. 
 
 One option: categories get a little "bullet" next to them, which is printed in the color it should be,
 and statuses also get a color, which is applied to the actual text. In a GUI, categories might be
 able to get an icon, so this is close to what I want.
 
 In the process of changing this, the 'status' property should be able to read in the old
 version, but save in the new.
 
TODO: A Rename doesn't keep order. It should. But then, that would also
mean we *would*, after all, have to maintain references as well, to be consistent.

TODO: A new "command syntax". Although the JavaScript thing is convenient
in allowing for more complex code, I rarely use it, and it actually makes
things more complex for what I want it for.

Basically, it would be a syntax similar in nature to a shell syntax, wherein
everything is whitespace separated arguments. An argument can
be a number, an identifier (text with no quotes and no spaces) or a quoted
string (quotes surrounding text with any amount of whitespace and other
special characters). Also, the "simple expression" syntax should be a subset
of the syntax, so it can be converted easily. I might also add some sort
of script resolving syntax, such as "{...}" to allow javascript evaluation.

Each command is therefore turned into a list of arguments, either string,
identifier, or number. The first and, often, second ones are the most a
important in looking up an appropriate action.

If the first argument is an identifier, an attempt will be made to resolve
it first to a command, then to a document relative to the current if no
command is found. If the first argument is a quoted string, it will try
to resolve to a document first, then a command if no such document is found.
If it can't be resolved to either, an error will be reported.

If the first argument is resolved to a command, then:
- If the command is marked as a "document" command, the command will be
  called with the current working document as the first argument, and any
  remaining arguments from the command line following that.
- If the command is marked as "non-document", meaning it doesn't require
  a document to run against, the command will simply be passed all of the
  remaining arguments.
  
If the first argument is resolved to a document, then an attempt will be
made to resolve the second argument to a command. If a command is found,
and that command is a "document" command, the command will be called with
the specified document as the first argument, and the remaining arguments
following that. If no command is found, an error will be reported. However,
if no second argument was passed, a "goto" command is assumed.

== New Commands and Data Structures ===
 
TODO: Need a "Help" task which lists all of the commands, and also explains them when a command is specified.

TODO: Need to handle User Tasks. Basically, my first instinct is that these are
stored in an attachment labeled _tasks.txt, probably using something like a
todo.txt format. That way, tasks can be applied to specific documents, rather
than be in a separate section and have to reference those docs
(although global tasks would be available too). There would be four commands:
- tasks list: list's tasks in the current directory, or global tasks, sorted
according to priority and due date.
- tasks create: creates a task either for a document or globally. It should also
be possible to add a task to multiple files based on tags or something else.
- tasks edit: edit the description of a task, and the start and due dates associated with it.
- tasks priority: set a priority of a task.
- tasks done: marks a task as completed, possibly with a reason.

There might be a "current" task as well, so I would do "task work" to take
the top task off the list and work on it, "task done" to mark it as completed
and "task next"/"previous" to switch tasks, or "task quit" to stop working
with the current task. The current task would be in saved state, and would
be displayed on opening up stew.

The task thing could actually be part of a workflow system, nudging you to keep going.
1) A task can be associated with documents, that are opened up as soon as you start working on the task.
2) When you start up stew, the current task will immediately pop up and ask to be worked on (this should be optional,
in case you started up stew to open up a different project temporarily).
3) When you close up stew for the day, it will ask you if you are done with the task or if you need to keep working on it.
4) Tasks can be associated with "production" goals, such as word-count, file counts, files at a given status, etc. This is a bit more complex, since you need to give it a filter to watch, and it has to be able to handle document types. These goals can be "verified" to have the current values recalculated and determine if they've been reached, recorded for historical reference, compared with previous values, and come up with ETA's.
5) There might also be reminders, scheduled to pop up occasionally, such as on start up or shut down. These could be used to help get your mind back on track, or to remember to write in your journal at the end of the day, etc. These reminders cou

Then again, these sorts of things might wait until we have a GUI program going.

TODO: Need to be able to store current document locations and return to them quickly. I'd like an
 Alt-Tab type interface for this, rather than trying to remember bookmark names, or using a stack
 like pushd and popd. For example, a command "switch" would put it into a mode where it's waiting 
 for keys. An arrow key right or left would cycle through a set of previous locations, perhaps even 
 open projects (but that would require a lot more changes). If you don't press anything for a 
 second or so, it would just switch back and forth between the two most recent, like Alt-Tab. 
 I wonder if I could use a Ctrl-Tab key command instead?
 
TODO: Need a mechanism to make it easy to send a certain set of pieces
 (by category, or tag, for example) to a cloud service, and pull them
 back in again later. Since this would involve mechanisms out of scope
 for stew, this is almost a different command line. But, at the very
 least, I could create a system for syncing a certain set of files with
 another folder. But, since some cloud services support tags, if I
 had specific mechanisms, it would work great. This is probably a 'plugin'
 oriented mechanism.
 
TODO: A "view" mechanism would be nice, so I can save a search for all
 docs marked with some property, for example. -- This is fairly simple
 to solve within a session: var view = list.bind(null,".","foo*","category")
 But, this isn't saveable across sessions. Some sort of macro mechanism
 would fix that. Possibly, a dot-command:
 .macro <name> <code>.
 
 The macro would be stored in the project settings and evaluated into 
 a variable with the specified name at startup (as well as upon creation). 
 That way, it would be 1) Saveable in text form and 2) bound to the 
 correct scopes.
 
 But, macros are security problems. Better would be just a view definition
 thing, and you could just type view("foo"), or better yet, view.foo().
 This could then be stored in the project itself, in _stew.json.
 
TODO: Another useful tool: 
 stew recent [number | string]: 
 - basically, whenever a project is opened in interactive stew, it is
 recorded as recently opened in the global settings file. The recent command would list
 these files (it should also be able to clear them). If passed a parameter, 
 it will open the repl with either the project file found at that index, or 
 would open the repl with the project whose basename is the specified string. 
 (If mru is used within the repl already, it will just list the files or 
 open the project, obviously)
 
TODO: Not really a new command, but a new way of handling commands.
Certain commands currently take a "doc" object as the first parameter,
which is optional unless there is no way to figure out by the parameter
types, making it a little tough. What if:
- Whenever the current working document is changed, the context is changed.
The documents in the current context become "commands". Specifying a
document name followed by a command causes the command to be called with
the document as the first parameter. Specifying the command alone causes 
the command to be called with the current document as the parameter. 
- Now, I don't want to have to scan the whole directory with every 
directory switch, so that I can add in subdirs and parent dirs, so it's 
possible that this might require some pre-parsing before parsing as JavaScript.
Or, maybe this is better done with another syntax more like a shell.
 
TODO: Finish implementing the unimplemented commands.

== Unreproducible Bugs ==

TODO: Trying to find a document with an apostrophe in it's name
 doesn't work. This happens with any command when specifying it as a
 path, or when comparing the names themselves (for example, when used
 as a predicate for "after"). 
 -- Can't confirm this issue. It seems to work fine now. I wonder if I
    had a title that had a single curly quotation mark instead of an
    apostrophe.
